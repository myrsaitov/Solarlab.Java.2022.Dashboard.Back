plugins {
	id 'org.springframework.boot' version '2.6.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'ru.solarlab'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	// REST
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Валидация DTO
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// DB
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.flywaydb:flyway-core:8.5.0'

	// OAuth
	implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.6.3'

	// Позволяет сократить код за счет аннотаций
	compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'

	// Маппер
	implementation "org.mapstruct:mapstruct:1.4.2.Final"
	annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"


	// Для документирования
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.7'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'


    // Тестирование
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:postgresql:1.16.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.16.3'
    testImplementation 'io.rest-assured:rest-assured:4.4.0'
    testImplementation 'io.rest-assured:json-schema-validator:4.4.0'
    testImplementation 'io.rest-assured:json-path:4.4.0'

// https://mvnrepository.com/artifact/org.powermock/powermock-mockito-release-full
	//testImplementation 'org.powermock:powermock-mockito-release-full:1.5.4'

}

jacoco {
	toolVersion = "0.8.7"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // report is always generated after tests run

	jacoco {
		enabled = true
		destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
		includes = []
		excludes = []
		excludeClassLoaders = []
		includeNoLocationClasses = false
		sessionId = "<auto-generated value>"
		dumpOnExit = true
		classDumpDir = null
		output = JacocoTaskExtension.Output.FILE
		address = "localhost"
		port = 6300
		jmx = false
	}

}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report

	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}

}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.5
			}
		}

		rule {
			enabled = false
			element = 'CLASS'
			includes = ['org.gradle.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.3
			}
		}
	}
}